from telebot import *
from time import *
from random import *
from list_stickers_id import *
import TOKEN

bot = telebot.TeleBot(TOKEN.condig)

# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_start = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
markup_start.add(but_start)

# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
markup_action = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
button1 = types.KeyboardButton('üîí –®–∏—Ñpo–≤–∞–Ω–∏–µ')
button2 = types.KeyboardButton('üîë –î–µ—à–∏—Ñpo–≤–∞–Ω–∏–µ')
markup_action.add(button1, button2)

# —è–∑—ã–∫
markup_language = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
buttn1 = types.KeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π (–±–µ–∑ –±—É–∫–≤—ã —ë)')
buttn2 = types.KeyboardButton('üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
markup_language.add(buttn1, buttn2)

# continue
markup_continue = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
bt1 = types.KeyboardButton('–î–∞ üòÄ')
bt2 = types.KeyboardButton('–ù–µ—Ç üòë')
markup_continue.add(bt1, bt2)

eng_lower = 'abcdefghijklmnopqrstuvwxyz'
eng_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
rus_lower = "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
rus_upper = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
error_rus = [' ', '.', ',', ';', ':', '!', '?', '—ë', '–Å', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '=', '+',
         '*', '/', '@', '#', '$', '%', '^', '&', '(', ')', '~', '‚Äì', '‚Äî', '¬´', '¬ª', '‚Äô', '‚Äù', '"', '{', '}', '[', ']']
for i in eng_upper:
    error_rus.append(i)
for j in eng_lower:
    error_rus.append(j)

error_eng = [' ', '.', ',', ';', ':', '!', '?', '—ë', '–Å', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '=', '+',
         '*', '/', '@', '#', '$', '%', '^', '&', '(', ')', '~', '‚Äì', '‚Äî', '¬´', '¬ª', '‚Äô', '‚Äù', '"', '{', '}', '[', ']']
for i in rus_upper:
    error_eng.append(i)
for j in rus_lower:
    error_eng.append(j)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–∑—É—è —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è
def encryption(st, step_shift, lang):
    tab = [chr(i) + chr(i) for i in range(ord('–ê'), ord('–Ø') + 1)]
    tab_eng = [chr(i) + chr(i) for i in range(ord('A'), ord('Z') + 1)]
    tab.extend(tab_eng)
    ans = ''
    for i in range(len(st)):
        if lang == '—Ä—É—Å—Å–∫–∏–π':
            if st[i] not in error_rus:
                if lang == '—Ä—É—Å—Å–∫–∏–π':
                    len_alph = 32
                    letters_upper = rus_upper
                    letters_small = rus_lower
                elif lang == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
                    len_alph = 26
                    letters_upper = eng_upper
                    letters_small = eng_lower

                if st[i] == st[i].upper():
                    ind = letters_upper.find(st[i])
                    new_ind = (ind + step_shift) % len_alph
                    new_letter = letters_upper[new_ind]
                else:
                    ind = letters_small.find(st[i])
                    new_ind = (ind + step_shift) % len_alph
                    new_letter = letters_small[new_ind]
                ans += new_letter
            else:
                ans += st[i]
        else:
            if st[i] not in error_eng:
                if lang == '—Ä—É—Å—Å–∫–∏–π':
                    len_alph = 32
                    letters_upper = rus_upper
                    letters_small = rus_lower
                elif lang == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
                    len_alph = 26
                    letters_upper = eng_upper
                    letters_small = eng_lower

                if st[i] == st[i].upper():
                    ind = letters_upper.find(st[i])
                    new_ind = (ind + step_shift) % len_alph
                    new_letter = letters_upper[new_ind]
                else:
                    ind = letters_small.find(st[i])
                    new_ind = (ind + step_shift) % len_alph
                    new_letter = letters_small[new_ind]
                ans += new_letter
            else:
                ans += st[i]
    for q in tab:
        ans = ans.replace(q, '\n\n')

    return ans

def decode(st, step_shift, lang):
    tab = [chr(i) + chr(i) for i in range(ord('–ê'), ord('–Ø') + 1)]
    tab_eng = [chr(i) + chr(i) for i in range(ord('A'), ord('Z') + 1)]
    tab.extend(tab_eng)
    ans = ''
    for j in range(len(st)):
        if lang == '—Ä—É—Å—Å–∫–∏–π':
            if st[j] not in error_rus:
                if lang == '—Ä—É—Å—Å–∫–∏–π':
                    len_alph = 32
                    letters_upper = rus_upper
                    letters_small = rus_lower
                else:
                    len_alph = 26
                    letters_upper = eng_upper
                    letters_small = eng_lower

                if st[j] == st[j].upper():
                    ind = letters_upper.find(st[j])
                    old_ind = (ind - step_shift) % len_alph
                    old_letter = letters_upper[old_ind]
                else:
                    ind = letters_small.find(st[j])
                    old_ind = (ind - step_shift) % len_alph
                    old_letter = letters_small[old_ind]
                ans += old_letter
            else:
                ans += st[j]
        else:
            if st[j] not in error_eng:
                if lang == '—Ä—É—Å—Å–∫–∏–π':
                    len_alph = 32
                    letters_upper = rus_upper
                    letters_small = rus_lower
                else:
                    len_alph = 26
                    letters_upper = eng_upper
                    letters_small = eng_lower

                if st[j] == st[j].upper():
                    ind = letters_upper.find(st[j])
                    old_ind = (ind - step_shift) % len_alph
                    old_letter = letters_upper[old_ind]
                else:
                    ind = letters_small.find(st[j])
                    old_ind = (ind - step_shift) % len_alph
                    old_letter = letters_small[old_ind]
                ans += old_letter
            else:
                ans += st[j]
    for q in tab:
        ans = ans.replace(q, '\n\n')
    return ans

global database
database = {}

# –∫–æ–¥ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def welcome(message):
    database[message.from_user.id] = ['', '', 0, '', 0]
    #print(database)
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEFhOFi849cOCPSM7fda6clEeHhqkml7gACUCoAAnG2WEj3hSO3VXNO-CkE')
    bot.send_message(message.chat.id,
                     '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>–ë–∏–ª–ª –®–∏—Ñ—Ä</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã \n'
                     '[—à–∏—Ñ—Ä–æ–≤–∞—Ç—å/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å] —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è.'.format(message.from_user,
                                                                                          bot.get_me()),
                     parse_mode='html')
    msg = bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ', reply_markup=markup_start)

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è [–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è]: \n'
                                      '1. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ù–ï –ø–∏—Å–∞—Ç—å —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ —Å–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –≤–æ—Å–ø—Ä–∏–Ω—è—Ç—ã –±–æ—Ç–æ–º –∫–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã!!! –ò—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–µ \n'
                                      '2. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç! \n'
                                      '3. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ—Ç—É —Å–º–∞–π–ª–∏–∫–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Ö –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å (—ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç) \n'
                                      '4. –ï—Å–ª–∏ —á–∞—Ç-–±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤–∑–∞–º–µ–Ω –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä \n'
                                      '5. –ï—Å–ª–∏ —è–∑—ã–∫ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–º—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–±—Ä–∞–ª–∏, –±–æ—Ç –æ—Å—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–≤ –µ–≥–æ! \n'
                                      '6. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–≤—Ç–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ (@Bogdanatrosenko)üòÄ', reply_markup=markup_start)

# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
@bot.message_handler(content_types=['sticker'])
def duck(message):
    stick = choice(List)
    bot.send_sticker(message.chat.id, stick)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def main_programm(message):
    fl = False
    msg = message.text
    try:
        if isinstance(msg, str):
            if message.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É':
                database[message.from_user.id] = ['', '', 0, '', 0]
                #print(database)
                bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup_action)

            elif message.text.lower() == 'üîí —à–∏—Ñpo–≤–∞–Ω–∏–µ':
                database[message.from_user.id][0] = '—à'
                database[message.from_user.id][4] = 0
                #print(database)
                bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —à–∏—Ñ—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
                                 reply_markup=markup_language)

            elif message.text.lower() == 'üîë –¥–µ—à–∏—Ñpo–≤–∞–Ω–∏–µ':
                database[message.from_user.id][0] = '–¥'
                database[message.from_user.id][4] = 0
                #print(database)
                bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —à–∏—Ñ—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
                                 reply_markup=markup_language)

            elif message.text == 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' and database[message.from_user.id][0] in ['—à', '–¥']:

                database[message.from_user.id][1] = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'
                #print(database)
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ROT', reply_markup=types.ReplyKeyboardRemove())

            elif message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π (–±–µ–∑ –±—É–∫–≤—ã —ë)' and database[message.from_user.id][0] in ['—à', '–¥']:
                database[message.from_user.id][1] = '—Ä—É—Å—Å–∫–∏–π'
                #print(database)
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ROT', reply_markup=types.ReplyKeyboardRemove())


            elif database[message.from_user.id][1] == '—Ä—É—Å—Å–∫–∏–π' and database[message.from_user.id][0] in ['—à', '–¥'] and database[message.from_user.id][4] == 0:
                try:
                    step_shift = int(message.text)
                    if 1 <= step_shift <= 32 and step_shift > 0:
                        database[message.from_user.id][2] = step_shift
                        database[message.from_user.id][4] = 1
                        #print(database)
                    else:
                        bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 32')
                except:
                    bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 32')

            elif database[message.from_user.id][1] == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' and database[message.from_user.id][0] in ['—à', '–¥'] and database[message.from_user.id][4] == 0:
                try:
                    step_shift = int(message.text)
                    if 1 <= step_shift <= 26 and step_shift > 0:
                        database[message.from_user.id][2] = step_shift
                        database[message.from_user.id][4] = 1
                        #print(database)
                    else:
                        bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 26')
                except:
                    bot.send_message(message.chat.id, '–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 26')
            else:
                bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòë', reply_markup=markup_start)
                fl = True

            if database[message.from_user.id][1] in ['—Ä—É—Å—Å–∫–∏–π', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'] and database[message.from_user.id][0] in ['—à', '–¥'] and database[message.from_user.id][2] != 0 and database[message.from_user.id][4] == 1 and fl != True:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ [—à–∏—Ñ—Ä–æ–≤–∞—Ç—å/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å]')
                bot.register_next_step_handler(msg, String)
        else:
             bot.send_sticker(message.chat.id, '')
    except:
        bot.send_message(message.chat.id, '–ò–∑–≤–µ–Ω–∏—Ç–µ —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ üòê', reply_markup=markup_start)

def String(message):
    st = message.text
    if isinstance(st, str):
        database[message.from_user.id][3] = st
        #print(database)

        if database[message.from_user.id][0] == '—à':
            bot.send_message(message.chat.id, '–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
            bot.send_message(message.chat.id, encryption(database[message.from_user.id][3], database[message.from_user.id][2], database[message.from_user.id][1]))
            sleep(2)
            msg = bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ', reply_markup=markup_start)
            bot.register_next_step_handler(msg, main_programm)
        elif database[message.from_user.id][0] == '–¥':
            bot.send_message(message.chat.id, '–†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
            bot.send_message(message.chat.id, decode(database[message.from_user.id][3], database[message.from_user.id][2], database[message.from_user.id][1]))
            sleep(2)
            msg = bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ', reply_markup=markup_start)
            bot.register_next_step_handler(msg, main_programm)
    else:
        msg = bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏!')
        bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ò∫')
        bot.register_next_step_handler(msg, String)

bot.polling(none_stop=True, interval=0)